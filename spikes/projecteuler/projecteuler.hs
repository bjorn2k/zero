import Data.Char

ismultiple3or5 (x) = x `mod` 3 == 0 || x `mod` 5 == 0
pe001 = foldl (+) 0 (filter ismultiple3or5 [1..1000])

fib = 0 : 1 : zipWith (+) fib (tail fib)
pe002 = sum (filter even (takeWhile (<4000000) fib))

largestprimefactor n = largestprimefactor' n 2 where
	largestprimefactor' n f	| n == f = f
				| rem n f == 0 = largestprimefactor' (div n f) f
				| otherwise = largestprimefactor' n (succ f)
pe003 = largestprimefactor 600851475143 

isPalindrome xs = xs == reverse xs
pe004 = maximum [a*b | a <- [100..999], b <- [a..999], isPalindrome $ show (a*b)]

pe005 = foldl lcm 1 [1..20]

pe006 = (sum[1..100] * sum[1..100])  - sum (map (\x -> x * x) [1..100])

primes = sieve[2..]
	where
		sieve (p:xs) = p : sieve [x | x <- xs, x `mod` p > 0]
pe007 = last (take 10001 primes)

pe008data = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
digitToList x = map digitToInt (show x)
mul5list [] = []
mul5list (x:xs) = mulfirst5(x:xs) : mul5list xs
	where
		mulfirst5 xs = foldl (*) 1 (take 5 xs)
pe008 = maximum $ mul5list $ digitToList $ pe008data

isPythagoreanTriplet a b c = (a < b && b < c) && (a*a + b*b == c*c)
pe009 = take 1 ([ a*b*c | a <- [0..1000],  b <- [a..1000], c <-[b..1000], (a + b + c == 1000) && isPythagoreanTriplet a b c])

pe010 = sum (takeWhile (<2000000) primes)
